/* automatically generated by rust-bindgen 0.59.2 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    #[link_name = "\u{1}_Z16CreateOptionsBC1PPv"]
    pub fn CreateOptionsBC1(optionsBC1: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CreateOptionsBC2PPv"]
    pub fn CreateOptionsBC2(optionsBC2: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CreateOptionsBC3PPv"]
    pub fn CreateOptionsBC3(optionsBC3: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CreateOptionsBC4PPv"]
    pub fn CreateOptionsBC4(optionsBC4: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CreateOptionsBC5PPv"]
    pub fn CreateOptionsBC5(optionsBC5: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CreateOptionsBC6PPv"]
    pub fn CreateOptionsBC6(optionsBC6: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CreateOptionsBC7PPv"]
    pub fn CreateOptionsBC7(optionsBC7: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17DestroyOptionsBC1Pv"]
    pub fn DestroyOptionsBC1(optionsBC1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17DestroyOptionsBC2Pv"]
    pub fn DestroyOptionsBC2(optionsBC2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17DestroyOptionsBC3Pv"]
    pub fn DestroyOptionsBC3(optionsBC3: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17DestroyOptionsBC4Pv"]
    pub fn DestroyOptionsBC4(optionsBC4: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17DestroyOptionsBC5Pv"]
    pub fn DestroyOptionsBC5(optionsBC5: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17DestroyOptionsBC6Pv"]
    pub fn DestroyOptionsBC6(optionsBC6: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17DestroyOptionsBC7Pv"]
    pub fn DestroyOptionsBC7(optionsBC7: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z20SetChannelWeightsBC1Pvfff"]
    pub fn SetChannelWeightsBC1(
        options: *mut ::std::os::raw::c_void,
        WeightRed: f32,
        WeightGreen: f32,
        WeightBlue: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z20SetChannelWeightsBC2Pvfff"]
    pub fn SetChannelWeightsBC2(
        options: *mut ::std::os::raw::c_void,
        WeightRed: f32,
        WeightGreen: f32,
        WeightBlue: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z20SetChannelWeightsBC3Pvfff"]
    pub fn SetChannelWeightsBC3(
        options: *mut ::std::os::raw::c_void,
        WeightRed: f32,
        WeightGreen: f32,
        WeightBlue: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z23SetDecodeChannelMappingPvb"]
    pub fn SetDecodeChannelMapping(
        options: *mut ::std::os::raw::c_void,
        mapRGBA: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13SetQualityBC1Pvf"]
    pub fn SetQualityBC1(
        options: *mut ::std::os::raw::c_void,
        fquality: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13SetQualityBC2Pvf"]
    pub fn SetQualityBC2(
        options: *mut ::std::os::raw::c_void,
        fquality: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13SetQualityBC3Pvf"]
    pub fn SetQualityBC3(
        options: *mut ::std::os::raw::c_void,
        fquality: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13SetQualityBC4Pvf"]
    pub fn SetQualityBC4(
        options: *mut ::std::os::raw::c_void,
        fquality: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13SetQualityBC5Pvf"]
    pub fn SetQualityBC5(
        options: *mut ::std::os::raw::c_void,
        fquality: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13SetQualityBC6Pvf"]
    pub fn SetQualityBC6(
        options: *mut ::std::os::raw::c_void,
        fquality: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z13SetQualityBC7Pvf"]
    pub fn SetQualityBC7(
        options: *mut ::std::os::raw::c_void,
        fquality: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z20SetAlphaThresholdBC1Pvh"]
    pub fn SetAlphaThresholdBC1(
        options: *mut ::std::os::raw::c_void,
        alphaThreshold: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17SetRefineStepsBC1Pvj"]
    pub fn SetRefineStepsBC1(
        options: *mut ::std::os::raw::c_void,
        steps: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10SetMaskBC6Pvj"]
    pub fn SetMaskBC6(
        options: *mut ::std::os::raw::c_void,
        mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10SetMaskBC7Pvh"]
    pub fn SetMaskBC7(
        options: *mut ::std::os::raw::c_void,
        mask: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z18SetAlphaOptionsBC7Pvbbb"]
    pub fn SetAlphaOptionsBC7(
        options: *mut ::std::os::raw::c_void,
        imageNeedsAlpha: bool,
        colourRestrict: bool,
        alphaRestrict: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z20SetErrorThresholdBC7Pvff"]
    pub fn SetErrorThresholdBC7(
        options: *mut ::std::os::raw::c_void,
        minThreshold: f32,
        maxThreshold: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10SetSrgbBC1Pvb"]
    pub fn SetSrgbBC1(options: *mut ::std::os::raw::c_void, sRGB: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10SetSrgbBC2Pvb"]
    pub fn SetSrgbBC2(options: *mut ::std::os::raw::c_void, sRGB: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10SetSrgbBC3Pvb"]
    pub fn SetSrgbBC3(options: *mut ::std::os::raw::c_void, sRGB: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z12SetSignedBC6Pvb"]
    pub fn SetSignedBC6(options: *mut ::std::os::raw::c_void, sf16: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CompressBlockBC1PKhjPhPKv"]
    pub fn CompressBlockBC1(
        srcBlock: *const ::std::os::raw::c_uchar,
        srcStrideInBytes: ::std::os::raw::c_uint,
        cmpBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CompressBlockBC2PKhjPhPKv"]
    pub fn CompressBlockBC2(
        srcBlock: *const ::std::os::raw::c_uchar,
        srcStrideInBytes: ::std::os::raw::c_uint,
        cmpBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CompressBlockBC3PKhjPhPKv"]
    pub fn CompressBlockBC3(
        srcBlock: *const ::std::os::raw::c_uchar,
        srcStrideInBytes: ::std::os::raw::c_uint,
        cmpBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CompressBlockBC7PKhjPhPKv"]
    pub fn CompressBlockBC7(
        srcBlock: *const ::std::os::raw::c_uchar,
        srcStrideInBytes: ::std::os::raw::c_uint,
        cmpBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z18DecompressBlockBC1PKhPhPKv"]
    pub fn DecompressBlockBC1(
        cmpBlock: *const ::std::os::raw::c_uchar,
        srcBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z18DecompressBlockBC2PKhPhPKv"]
    pub fn DecompressBlockBC2(
        cmpBlock: *const ::std::os::raw::c_uchar,
        srcBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z18DecompressBlockBC3PKhPhPKv"]
    pub fn DecompressBlockBC3(
        cmpBlock: *const ::std::os::raw::c_uchar,
        srcBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z18DecompressBlockBC7PKhPhPKv"]
    pub fn DecompressBlockBC7(
        cmpBlock: *const ::std::os::raw::c_uchar,
        srcBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CompressBlockBC4PKhjPhPKv"]
    pub fn CompressBlockBC4(
        srcBlock: *const ::std::os::raw::c_uchar,
        srcStrideInBytes: ::std::os::raw::c_uint,
        cmpBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z18DecompressBlockBC4PKhPhPKv"]
    pub fn DecompressBlockBC4(
        cmpBlock: *const ::std::os::raw::c_uchar,
        srcBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17CompressBlockBC4SPKcjPhPKv"]
    pub fn CompressBlockBC4S(
        srcBlock: *const ::std::os::raw::c_char,
        srcStrideInBytes: ::std::os::raw::c_uint,
        cmpBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z19DecompressBlockBC4SPKhPcPKv"]
    pub fn DecompressBlockBC4S(
        cmpBlock: *const ::std::os::raw::c_uchar,
        srcBlock: *mut ::std::os::raw::c_char,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CompressBlockBC5PKhjS0_jPhPKv"]
    pub fn CompressBlockBC5(
        srcBlock1: *const ::std::os::raw::c_uchar,
        srcStrideInBytes1: ::std::os::raw::c_uint,
        srcBlock2: *const ::std::os::raw::c_uchar,
        srcStrideInBytes2: ::std::os::raw::c_uint,
        cmpBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z18DecompressBlockBC5PKhPhS1_PKv"]
    pub fn DecompressBlockBC5(
        cmpBlock: *const ::std::os::raw::c_uchar,
        srcBlock1: *mut ::std::os::raw::c_uchar,
        srcBlock2: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17CompressBlockBC5SPKcjS0_jPhPKv"]
    pub fn CompressBlockBC5S(
        srcBlock1: *const ::std::os::raw::c_char,
        srcStrideInBytes1: ::std::os::raw::c_uint,
        srcBlock2: *const ::std::os::raw::c_char,
        srcStrideInBytes2: ::std::os::raw::c_uint,
        cmpBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z19DecompressBlockBC5SPKhPcS1_PKv"]
    pub fn DecompressBlockBC5S(
        cmpBlock: *const ::std::os::raw::c_uchar,
        srcBlock1: *mut ::std::os::raw::c_char,
        srcBlock2: *mut ::std::os::raw::c_char,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16CompressBlockBC6PKtjPhPKv"]
    pub fn CompressBlockBC6(
        srcBlock: *const ::std::os::raw::c_ushort,
        srcStrideInShorts: ::std::os::raw::c_uint,
        cmpBlock: *mut ::std::os::raw::c_uchar,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z18DecompressBlockBC6PKhPtPKv"]
    pub fn DecompressBlockBC6(
        cmpBlock: *const ::std::os::raw::c_uchar,
        srcBlock: *mut ::std::os::raw::c_ushort,
        options: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
